pub type ArchType = u16;
pub const X86_BIOS: ArchType = 0;	// [RFC5970][RFC4578]
pub const NECPC98: ArchType = 1;	// [RFC5970][RFC4578]
pub const ITANIUM: ArchType = 2;	// [RFC5970][RFC4578]
pub const DEC_ALPHA: ArchType = 3;	// [RFC5970][RFC4578]
pub const ARC_X86: ArchType = 4;	// [RFC5970][RFC4578]
pub const INTEL_LEAN_CLIENT: ArchType = 5;	// [RFC5970][RFC4578]
pub const X86_UEFI: ArchType = 6;	// [RFC5970][RFC4578]
pub const X64_UEFI: ArchType = 7;	// [RFC5970][RFC4578]
pub const EFI_XSCALE: ArchType = 8;	// [RFC5970][RFC4578]
pub const EBC: ArchType = 9;	// [RFC5970][RFC4578]
pub const ARM_32_BIT_UEFI: ArchType = 10;	// [RFC5970]
pub const ARM_64_BIT_UEFI: ArchType = 11;	// [RFC5970]
pub const POWERPC_OPEN_FIRMWARE: ArchType = 12;	// [Thomas_Huth]
pub const POWERPC_EPAPR: ArchType = 13;	// [Thomas_Huth]
pub const POWER_OPAL_V3: ArchType = 14;	// [Jeremy_Kerr]
pub const X86_UEFI_BOOT_FROM_HTTP: ArchType = 15;	// [Samer_El-Haj-Mahmoud]
pub const X64_UEFI_BOOT_FROM_HTTP: ArchType = 16;	// [Samer_El-Haj-Mahmoud]
pub const EBC_BOOT_FROM_HTTP: ArchType = 17;	// [Samer_El-Haj-Mahmoud]
pub const ARM_UEFI_32_BOOT_FROM_HTTP: ArchType = 18;	// [Samer_El-Haj-Mahmoud]
pub const ARM_UEFI_64_BOOT_FROM_HTTP: ArchType = 19;	// [Samer_El-Haj-Mahmoud]
pub const PCAT_BIOS_BOOT_FROM_HTTP: ArchType = 20;	// [Samer_El-Haj-Mahmoud]
pub const ARM_32_UBOOT: ArchType = 21;	// [Joseph_Shifflett]
pub const ARM_64_UBOOT: ArchType = 22;	// [Joseph_Shifflett]
pub const ARM_UBOOT_32_BOOT_FROM_HTTP: ArchType = 23;	// [Joseph_Shifflett]
pub const ARM_UBOOT_64_BOOT_FROM_HTTP: ArchType = 24;	// [Joseph_Shifflett]
pub const RISC_V_32_BIT_UEFI: ArchType = 25;	// [Dong_Wei]
pub const RISC_V_32_BIT_UEFI_BOOT_FROM_HTTP: ArchType = 26;	// [Dong_Wei]
pub const RISC_V_64_BIT_UEFI: ArchType = 27;	// [Dong_Wei]
pub const RISC_V_64_BIT_UEFI_BOOT_FROM_HTTP: ArchType = 28;	// [Dong_Wei]
pub const RISC_V_128_BIT_UEFI: ArchType = 29;	// [Dong_Wei]
pub const RISC_V_128_BIT_UEFI_BOOT_FROM_HTTP: ArchType = 30;	// [Dong_Wei]
pub const S390_BASIC: ArchType = 31;	// [Viktor_Mihajlovski]
pub const S390_EXTENDED: ArchType = 32;	// [Viktor_Mihajlovski]

pub fn to_str(a: ArchType) -> Result<&'static str, ()> {
  match a {
    0 => Ok("X86_BIOS"),
    1 => Ok("NECPC98"),
    2 => Ok("ITANIUM"),
    3 => Ok("DEC_ALPHA"),
    4 => Ok("ARC_X86"),
    5 => Ok("INTEL_LEAN_CLIENT"),
    6 => Ok("X86_UEFI"),
    7 => Ok("X64_UEFI"),
    8 => Ok("EFI_XSCALE"),
    9 => Ok("EBC"),
    10 => Ok("ARM_32_BIT_UEFI"),
    11 => Ok("ARM_64_BIT_UEFI"),
    12 => Ok("POWERPC_OPEN_FIRMWARE"),
    13 => Ok("POWERPC_EPAPR"),
    14 => Ok("POWER_OPAL_V3"),
    15 => Ok("X86_UEFI_BOOT_FROM_HTTP"),
    16 => Ok("X64_UEFI_BOOT_FROM_HTTP"),
    17 => Ok("EBC_BOOT_FROM_HTTP"),
    18 => Ok("ARM_UEFI_32_BOOT_FROM_HTTP"),
    19 => Ok("ARM_UEFI_64_BOOT_FROM_HTTP"),
    20 => Ok("PCAT_BIOS_BOOT_FROM_HTTP"),
    21 => Ok("ARM_32_UBOOT"),
    22 => Ok("ARM_64_UBOOT"),
    23 => Ok("ARM_UBOOT_32_BOOT_FROM_HTTP"),
    24 => Ok("ARM_UBOOT_64_BOOT_FROM_HTTP"),
    25 => Ok("RISC_V_32_BIT_UEFI"),
    26 => Ok("RISC_V_32_BIT_UEFI_BOOT_FROM_HTTP"),
    27 => Ok("RISC_V_64_BIT_UEFI"),
    28 => Ok("RISC_V_64_BIT_UEFI_BOOT_FROM_HTTP"),
    29 => Ok("RISC_V_128_BIT_UEFI"),
    30 => Ok("RISC_V_128_BIT_UEFI_BOOT_FROM_HTTP"),
    31 => Ok("S390_BASIC"),
    32 => Ok("S390_EXTENDED"),
    _ => Err(()),
  }
}
